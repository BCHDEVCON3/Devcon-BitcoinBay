{
  "contractName": "SLPGenesis",
  "constructorInputs": [
    {
      "name": "ownerHash",
      "type": "bytes20"
    }
  ],
  "abi": [
    {
      "name": "reclaim",
      "covenant": false,
      "inputs": [
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        }
      ]
    },
    {
      "name": "genesisSLP",
      "covenant": true,
      "inputs": [
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        },
        {
          "name": "token_ticker",
          "type": "bytes"
        },
        {
          "name": "token_name",
          "type": "bytes"
        },
        {
          "name": "token_document_url",
          "type": "bytes"
        },
        {
          "name": "token_document_hash",
          "type": "bytes"
        },
        {
          "name": "decimals",
          "type": "bytes1"
        },
        {
          "name": "mint_baton_vout",
          "type": "bytes1"
        },
        {
          "name": "initial_token_mint_quantity",
          "type": "bytes8"
        }
      ]
    }
  ],
  "bytecode": "OP_OVER OP_0 OP_NUMEQUAL OP_IF OP_2 OP_PICK OP_HASH160 OP_EQUALVERIFY OP_ROT OP_ROT OP_CHECKSIG OP_NIP OP_ELSE OP_SWAP OP_1 OP_NUMEQUALVERIFY OP_OVER 6b OP_SPLIT OP_NIP OP_SIZE 34 OP_SUB OP_SPLIT OP_8 OP_SPLIT OP_4 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_5 OP_PICK OP_HASH160 OP_4 OP_ROLL OP_EQUALVERIFY OP_2ROT OP_2DUP OP_SWAP OP_SIZE OP_1SUB OP_SPLIT OP_DROP OP_7 OP_ROLL OP_SHA256 OP_ROT OP_CHECKDATASIGVERIFY OP_CHECKSIGVERIFY 0000000000000000 6a 534c5000 OP_SIZE OP_SWAP OP_CAT OP_CAT OP_1 OP_SIZE OP_SWAP OP_CAT OP_CAT 47454e45534953 OP_SIZE OP_DUP 4b OP_GREATERTHAN OP_IF 4c OP_SWAP OP_CAT OP_ENDIF OP_SWAP OP_CAT OP_CAT OP_5 OP_ROLL OP_SIZE OP_DUP 4b OP_GREATERTHAN OP_IF 4c OP_SWAP OP_CAT OP_ENDIF OP_SWAP OP_CAT OP_CAT OP_5 OP_ROLL OP_SIZE OP_DUP 4b OP_GREATERTHAN OP_IF 4c OP_SWAP OP_CAT OP_ENDIF OP_SWAP OP_CAT OP_CAT OP_5 OP_ROLL OP_SIZE OP_DUP 4b OP_GREATERTHAN OP_IF 4c OP_SWAP OP_CAT OP_ENDIF OP_SWAP OP_CAT OP_CAT OP_5 OP_ROLL OP_SIZE OP_DUP 4b OP_GREATERTHAN OP_IF 4c OP_SWAP OP_CAT OP_ENDIF OP_SWAP OP_CAT OP_CAT OP_5 OP_ROLL OP_SIZE OP_DUP 4b OP_GREATERTHAN OP_IF 4c OP_SWAP OP_CAT OP_ENDIF OP_SWAP OP_CAT OP_CAT OP_5 OP_ROLL OP_SIZE OP_DUP 4b OP_GREATERTHAN OP_IF 4c OP_SWAP OP_CAT OP_ENDIF OP_SWAP OP_CAT OP_CAT OP_5 OP_ROLL OP_SIZE OP_DUP 4b OP_GREATERTHAN OP_IF 4c OP_SWAP OP_CAT OP_ENDIF OP_SWAP OP_CAT OP_CAT OP_SIZE OP_SWAP OP_CAT OP_CAT 2202 d007 OP_4 OP_ROLL OP_BIN2NUM OP_2 OP_PICK OP_SUB OP_2 OP_PICK OP_SUB OP_OVER OP_SUB OP_2 OP_PICK OP_8 OP_NUM2BIN 17a914 OP_CAT OP_6 OP_PICK OP_HASH160 OP_CAT 87 OP_CAT OP_3 OP_ROLL OP_8 OP_NUM2BIN 17a914 OP_CAT OP_6 OP_PICK OP_HASH160 OP_CAT 87 OP_CAT OP_2 OP_PICK OP_4 OP_ROLL OP_GREATERTHANOREQUAL OP_IF OP_2 OP_PICK OP_8 OP_NUM2BIN 17a914 OP_CAT OP_6 OP_PICK OP_HASH160 OP_CAT 87 OP_CAT OP_5 OP_PICK OP_5 OP_PICK OP_4 OP_PICK OP_CAT OP_3 OP_PICK OP_CAT OP_2 OP_PICK OP_CAT OP_HASH256 OP_EQUALVERIFY OP_DROP OP_ELSE OP_4 OP_PICK OP_4 OP_PICK OP_3 OP_PICK OP_CAT OP_2 OP_PICK OP_CAT OP_HASH256 OP_EQUALVERIFY OP_ENDIF OP_2DROP OP_2DROP OP_2DROP OP_1 OP_ENDIF",
  "source": "pragma cashscript ^0.5.0;\r\n\r\ncontract SLPGenesis(bytes20 ownerHash) {\r\n  function reclaim(pubkey pk, sig s) {\r\n    require(hash160(pk) == ownerHash);\r\n    require(checkSig(s, pk));\r\n  }\r\n\r\n  function genesisSLP(pubkey pk, sig s, bytes token_ticker, bytes token_name, bytes token_document_url, bytes token_document_hash, bytes1 decimals, bytes1 mint_baton_vout, bytes8 initial_token_mint_quantity) {\r\n    require(hash160(pk) == ownerHash);\r\n    require(checkSig(s, pk));\r\n\r\n    bytes genesis_return = new OutputNullData([\r\n      0x534c5000,\r\n      0x01,\r\n      bytes('GENESIS'),\r\n      token_ticker,\r\n      token_name,\r\n      token_document_url,\r\n      token_document_hash,\r\n      decimals,\r\n      mint_baton_vout,\r\n      initial_token_mint_quantity\r\n    ]);\r\n\r\n    int dust = 546;\r\n    int minerFee = 2000;\r\n    int intValue = int(bytes(tx.value));\r\n\r\n    int changeAmount = intValue - dust - dust - minerFee;\r\n\r\n    bytes32 initialReceiver = new OutputP2SH(bytes8(dust), hash160(tx.bytecode));\r\n    bytes32 mintReceiver = new OutputP2SH(bytes8(dust), hash160(tx.bytecode));\r\n\r\n    if (changeAmount >= (minerFee)) {\r\n      bytes32 change = new OutputP2SH(bytes8(changeAmount), hash160(tx.bytecode));\r\n      require(tx.hashOutputs == hash256(genesis_return + initialReceiver + mintReceiver + change));\r\n    } else {\r\n      require(tx.hashOutputs == hash256(genesis_return + initialReceiver + mintReceiver));\r\n    }\r\n  }\r\n}\r\n",
  "compiler": {
    "name": "cashc",
    "version": "0.5.0"
  },
  "updatedAt": "2020-09-06T20:32:38.861Z"
}